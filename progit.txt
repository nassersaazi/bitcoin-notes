Undoing things
- If you commit and then realize you forgot to stage the changes in a file you wanted to add to this commit, you can do something like this:
    $ git commit -m 'Initial commit'
    $ git add forgotten_file
    $ git commit --amend
    You end up with a single commit — the second commit replaces the results of the first

Pushing to your remotes

- Git supports two types of tags: lightweight and annotated.
- A lightweight tag is very much like a branch that doesn’t change — it’s just a pointer to a specific commit.
- Annotated tags, however, are stored as full objects in the Git database. They’re checksummed; contain the tagger name, email, and date; have a tagging message; and can be signed and verified with GNU Privacy Guard (GPG). It’s generally recommended that you create annotated tags so you can have all this information; but if you want a temporary tag or for some reason don’t want to keep the other information, lightweight tags are available too
- If you have a lot of tags that you want to push up at once, you can use the --tags option to the git push command. This will transfer all of your tags to the remote server that are not already there

Chapter 3(Git branching)
- Git doesn’t store data as a series of changesets or differences, but instead as a series of snapshots
- by default, git log will only show commit history below the branch you’ve
checked out. To show commit history for the desired branch you have to explicitly specify it: e.g. git log testing. To show all of the branches, add --all to your git log command
- When you switch branches in Git, files in your working directory will change. If you switch to an older branch, your working directory will be reverted to look like it did the last time you committed on that branch. If Git cannot do it cleanly, it will not let you switch at all.

Basic branching and merging
