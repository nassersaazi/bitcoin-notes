practical vim

Chapter 1

.(dot) command repeats the last change
u command undoes the last change
A command appends at end of current line
x command deletes the character under the cursor
s command deletes the character under the cursor and get into Insert mode
$ command moves you to end of line
dd command deletes current line
>G increases indentation from current line to end of file
f{char} command tells Vim to look ahead for the next occurrence of the specified character and then move the
cursor directly to it if a match is found
F{char} command tells Vim to look backwards for the previous occurrence of the specified character and then move the
cursor directly to it if a match is found
; command will repeat the last search that the f/F command performed
, command will repeat the last search that the f/F command performed in the reverse direction
* command executes a search for a word under a cursor
:vs command does a vertical split
Ctrl + W + (hjkl) -> changes to different window in any direction
Ctrl + W + Ctrl + W -> toggles btn open windows
vim path/to/folder -> takes you to folder path and prompts file selection
The Dot Formula: One keystroke to Move, One keystroke to Execute

Chapter 2

vim provides a modal user interface. this means that the result of pressing any key on the keyboard may differ depending on which mode is active at
the time. it’s vital to know which mode is active and how to switch between vim’s modes.

vap, then u -> converts paragraph to lowercase
vap, then U -> converts paragraph to uppercase

Chapter 3

J command joins the current and next lines together
Replace mode is identical to Insert mode, except that it overwrites existing text
in the document.

chapter 4(visual mode)
gv command reselects last visual selection
o command in visual mode  -> go to other end of highlighted text
r- command in replaces all selected text with -

When a Visual mode command is repeated, it affects the same range of text 

The i and a commands both switch from Normal to Insert mode,  positioning the cursor in front of or after the current
character, respectively. The I and A commands behave similarly, except that they position the cursor at the start or end of the current line.


Chapter 5(command line mode)

The :copy command (and its shorthand :t) lets us duplicate one or more lines from one part of the document to another, while the :move command lets us place them somewhere else in the document

:%s/Practical/Pragmatic/ -> substitute every occurence in the file of Practical with Pragmatic
:4t. -> copy contents of line 4 to current(where cursor is)
:t$ -> copy current line to end of file
:m command is similar to :t command; where :t copies,:m cuts
:sp {file} command splits window horizontally, loading {file} into new window
:vs {file} command splits vertically, loading {file} into new window

:e# takes you to the previous file stored in the buffer
:!ls shows contents of current directory 

q: accesses the command-line window
q/ Open the command-line window with history of searches

recall commands from history with up and down arrows in command mode or search mode

when a visual selection is made(eg Vjj) norm . in command mode executes the last normal mode command on the selected lines

When duplicating a distant line, the :t command is usually more efficient yyp command

On Vim’s command line, the % symbol is shorthand for the current file name

Ctrl-z suspends vim and gets to the bash terminal .fg command brings back a recently suspended vim session

Chapter 6 (Manage multiple files)

Files are stored on the disk, whereas buffers exist in memory. When we open a file in Vim, its contents are read into a buffer, which takes the same name as the file. Initially, the contents of the buffer will be identical to those of the file, but the two will diverge as we make changes to the buffer. If we decide that we want to keep our changes, we can write the contents of the buffer back into the file. Most Vim commands operate on buffers, but a few operate on files, including the :write, :update, and :saveas commands

The :ls command gives us a listing of all the buffers that have been loaded into memory . We can switch to the next buffer in the list by running the :bnext command

We can traverse the buffer list using four commands—:bprev and :bnext to move backward and forward one at a time, and :bfirst and :blast to jump to the start or end of the list. 

The argument list (:args) represents the list of files that gets passed as an argument when we run the vim command.We can change the contents of the argument list at any time, which means that the :args listing doesn’t necessarily reflect the values that were passed to the vim command when we launched the editor

The argument list is simpler to manage than the buffer list, making it the ideal place to group our buffers into a collection. With the :args {arglist} command, we can clear the argument list and then repopulate it from scratch with a single command. We can traverse the files in the argument list using :next and :prev commands. Or we can use :argdo to execute the same command on each buffer in the set

Command           | Effect

<c-w>w            | Cycle between open windows
<c-w>h            | Focus the window to the left
<c-w>j            | Focus the window below
<c-w>h            | Focus the window above
<c-w>l            | Focus the window to the right
<c-w>c            | Close the active window
<c-w>o            | Keep only active window ,closing all others
:tabe {filename}  | Open {filename} in a new tab
:tabc             | Close current tab page and all of its windows
:tabo             | Keep the active tab page, closing all others


Chapter 7 (Open files and save them to disk)

Command        | Effect

:e.            | Open file explorer for current working directory
:Explore       | Open file explorer for the directory of the active buffer
:Sexplore      | Open file explorer in horizontal split window
:Vexplore      | Open file explorer in vertical split window

The % symbol has special meaning on Vim’s command line: it expands to represent the path of the current buffer


Chapter 8(Navigate Inside Files with Motions)

Vim is optimized for the touch typist Real lines vs Display lines: -> The j and k commands move down and up by real lines, whereas the gj and gk commands move down and up by display lines

Command      | Effect

j            | Down one real line
gj           | Down one display line
k            | Up one real line
gk           | Up one display line
0            | To first character of real line
g0           | To first character of display line
^            | To first nonblank character of real line
g^           | To first nonblank character of display line
$            | To end of real line
g$           | To end of display line

Note the pattern: j , k , 0 , and $ all interact with real lines, while prefixing any of these with g tells Vim to act on display lines instead.

w            | Forward to the next word
b            | Backward to start of current/next word
e            | Forward to end of current/next word
ea           | Append to end of current word


f{char}      | Forward to the next occurrence of {char}
F{char}      | Backward to the previous occurrence of {char}
t{char}      | Forward to the character before the next occurrence of {char}
T{char}      | Backward to the character after the previous occurrence of {char}
;            | Repeat the last character-search command
,            | Reverse the last character-search command
%            | Jump between opening and closing sets of parentheses. It works with (),{} and []

d/mo         | Delete all characters from where cursor is till the first occurence of characters {mo}


vaw/daw      | sample motions on a word
vas/das      | sample motions on a sentence
vap/dap      | sample motions on a paragraph

we’re not limited to using the search command in normal mode. We can use it from Visual and Operator-Pending modes just as well to do real work

Text objects prefixed with i (e.g vi{}) select inside the delimiters, whereas those that are prefixed with a (e.g va{}) select everything including the delimiters. As a mnemonic, think of i as inside and a as around (or all)

The iw text object interacts with everything from the first to the last character of the current word. The aw text object does the same, but it extends the range to include any whitespace characters after or before the word, if whitespace is present.

Vim ships with a plugin called matchit, which enhances the functionality of the % command. When this plugin is enabled, the % command can jump between matching pairs of keywords. For example, in an HTML file, the % command would jump between opening and closing tags

Even though matchit ships with the Vim distribution, it’s not enabled by default.  This minimal vimrc would make Vim autoload the matchit plugin on startup:

set nocompatible
filetype plugin on
runtime macros/matchit.vim


Vim’s marks allow us to jump quickly to locations of interest within a document.  We can set marks manually, but Vim also keeps track of certain points of interest for us automatically.

Vim's automatic marks

Keystrokes  | Buffer Contents

``          | Position before the last jump within current file
`.          | Location of last change
`^          | Location of last insertion
`[          | start of last change or yank
`]          | End of last change or yank
`<          | Start of last visual selection
`>          | End of last visual selection

Chapter 9(Navigate Between Files with Jumps)

- the commands g; and g, traverse through the change list
- use ctrl+i and ctrl+o to traverse through the jump list

- Motions move within a file whereas jumps move between files
- if we leave insert mode and then scroll around the document, we can quickly carry on where we left off by pressing gi command
- Vim maintains a change list for each individual buffer in an editing session.  By contrast, a separate jump list is created for each window
- when gf command is used, Vim checks each of the directories listed in ‘path’ to see if it contains a filename that matches the text under the cursor

- While the jump list and change list are like breadcrumb trails that allow us to retrace our steps, the gf command lets us navigate the entire codebase

Snapping between files using global marks:
- A global mark is a kind of bookmark that allows us to jump btn files. Marks are especially useful for snapping(switching) back to a file after exploring a codebase.
- The m{letter} command allows us to create a mark at the current cursor position
- Lowercase letters create marks that are local to a buffer, whereas uppercase letters create global marks. Having set a mark, we can snap our cursor back to it with the `{letter} command
- By default, global marks are persisted between editing sessions

Try this: open up your vimrc file and press mV to set a global mark (mnemonic: V for vimrc). Switch to another file and then press `V , and you should snap back to the global mark you set in the vimrc file. Now you can always open up your vimrc file with two keystrokes—that is, unless you set the global V mark to another location

Get into a habit of setting a global mark before using any commands that interact with the quickfix list, such as :grep, :vimgrep, and :make. The same goes for the commands that interact with the buffer and argument lists, such as :args {arglist} and :argdo

You can set up to twenty-six global marks, which is more than you’ll ever need. Use them liberally; set a global mark any time you see something that you might want to snap back to later


Chapter 10 (Copy and Paste)
- Vim has one named register for each letter of the alphabet. When we address a named register with a lowercase letter, it overwrites the specified register, whereas when we use an uppercase letter, it appends to the specified register
- When we use the p command in Visual mode, Vim replaces the selection with the contents of the specified register
- The p command puts the text from a register after the cursor position , whereas the (uppercase) P command inserts text before the cursor position
- When pasting from a line-wise register, the p and P commands put the text below or above the current line.
- Vim also provides gp and gP commands. These also put the text before or after the current line, but they leave the cursor positioned at the end of the pasted text instead of at the beginning. The gP command is especially useful when duplicating a range of lines

Chapter 11(Macros)
- Macros allow us to record a sequence of changes and then play them back
- When recording a macro, ensure that every command is repeatable

Chapter 12(Matching Patterns and Literals)
- The “.” symbol has a special meaning: it matches any character
- When defining a pattern, specifying where a word begins and ends can be useful. Vim’s word-delimiter items let us do that. For example, if we specifically want to match “the” as a word rather than a fragment, we can use word boundary delimiters. In very magic searches, these are represented by the < and > symbols. So if we amended our search to /\v<the> <CR> , it would find only one match in the excerpt


Chapter 13(Search)
- The search prompt always begins with either the / or ? character, which indicates in what direction the search will scan

Command      | Effect

n            | Jump to next match, preserving direction and offset
N            | Jump to previous match, preserving direction and offset
/<CR>        | Jump to forward to next match of same pattern
?<CR>        | Jump to backward to previous match of same pattern
gn           | Enable character-wise Visual mode and select next search match
gN           | Enable character-wise Visual mode and select previous search match

:%s///gn        | Count matches in a file with the ':substitute' Command. Note that the command contains three consecutive / characters. The first and second delimit the pattern field, and the second and third delimit the replacement field. Be careful not to omit any of the / characters. Running :%s//gn would replace every match with gn!
:vimgrep //g %  | Count matches in a file with the ':vimgrep' Command.This command populates the quickfix list with each match found in the current buffer. We can go back and forward through matches using the :cnext and :cprev commands

Chapter 15(Global commands)
- The default range for the :global command is the entire file (%). That sets it apart from most other Ex commands, including :delete, :substitute, and :normal, whose range is the current line (.) by default
- The :vglobal command, or :v for short, does the opposite of the :g command. That is, it executes a command on each line that does not match the specified pattern
- :g/Chapter/t$ -> copy all lines containing 'Chapter' to the end of the file

Chapter 16(Index and Navigate Source Code with ctags)
- If we want to use Vim’s ctag navigation commands, we must ensure that the tags file is up-to-date and that Vim knows where to look for it
- :!ctags -R -> invoke ctags directly in Vim
- Vim’s autocommand feature allows us to invoke a command on each occurrence of an event, such as a buffer being created, opened, or written to file
- :autocmd BufWritePost * call system("ctags -R") -> autocommand that invokes ctags every time we save a file. This re-indexes our entire codebase each time we save changes to a single file
- Using an autocommand to invoke ctags every time a buffer is saved ensures that our tags file is always up-to-date, but at what cost? For a small codebase, the time taken to run ctags may be imperceptible, but for larger projects, the lag may be long enough to interrupt our workflow. Also, this technique is blind to any changes that happen to a file outside of the editor


Command          | Effect

<C-]>            | Jump to the first tag that matches the word under the cursor
g<C-]>           | Prompt user to select from multiple matches for the word under the cursor. If only one match exists, jump to it without prompting
:tag {keyword}   | Jump to the first tag that matches {keyword}
:tjump {keyword} | Prompt user to select from multiple matches for {keyword}. If only one match exists, jump to it without prompting
:pop or <C-t>    | Reverse through tag history
:tag             | Advance through tag history
:tnext           | Jump to next matching tag
:tprev           | Jump to previous matching tag
:tfirst          | Jump to first matching tag
:tlast           | Jump to last matching tag
:tselect         | Prompt user to choose an item from the tag match list

todos:

- check out usage of vimgrep and write article about it
- write article on vim macros(reread chapter 11 of practical vim)
- write article on vim ctags(reread chapter 16 of practical vim)
- write article on power of vim's search and how to leverage it (inspiration -> practical vim--chapter 13)
- check out surround.vim plugin(http://github.com/tpope/vim-surround)
- write article about how vim helped me improve my workflow to contribute to oss(btc-from the cmdline) -> publish it after opening pr
- dailyinterviewpro -> analyse problem from alreadysolved folder
- explore vim tutor and make notes
- write medium article about the power of (.) and (*) in vim, and tips & tricks of these symbols when in visual mode
- write medium article about the replace mode
- write medium article about registers in vim(inspiration -> practical vim--chapter 10)
- write medium article (find by character, the quickest way to move around in Vim) -> reference....Tip 50,Practical Vim
- write medium article about the story of the etymology of vim -> refer to chpt 5 of practical vim
- create vim version of crontab gru in python(django)
- write medium article on SIGINT vs SIGTERM vs SIGKILL(inspiration -> https://www.cloudbees.com/blog/docker-how-to-stop-and-remove-all-containers-at-once)

Chapter 1
Chapter 2
Chapter 3
Chapter 5(command line mode)
Chapter 6 (Manage multiple files)
Chapter 7 (Open files and save them to disk)
Chapter 8(Navigate Inside Files with Motions)
Chapter 9(Navigate Between Files with Jumps)
Chapter 10 (Copy and Paste)
Chapter 11(Macros)
Chapter 12(Matching Patterns and Literals)
Chapter 13(Search)
Chapter 15(Global commands)
